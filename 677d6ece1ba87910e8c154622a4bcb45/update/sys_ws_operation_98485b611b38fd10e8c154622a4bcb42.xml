<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>Lifecycle Hub Asset Update</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
 var writer = response.getStreamWriter();
 var responseBody = {};
 var hdrs = {};
 var count = 0;
 
 //Inbound Variables May be an array or a single object
 var rd = request.body.data; 
 if (rd instanceof Array) { 
 for(var i = 0; i < rd.length; i++) { saveRecord(rd[i]); count++; }
 } else { saveRecord(rd); count++; }
 
 hdrs['Content-Type'] = 'application/json';
 hdrs['Content-Version'] = '1.1';
 response.setStatus(200);
 response.setHeaders(hdrs);
 
 responseBody.received = count;
 writer.writeString(global.JSON.stringify(responseBody));
 
 function saveRecord(data){
 var record = data;
 var stage = new GlideRecord('x_mgmmi_dell_lch_a_lifecycle_hub');
 stage.initialize();
 var stat = 'AMDB';
 var code = 'Asset Updated';
 var work = null;
 var worknum = 0;
 for (var fld in record) { 
 if(fld.length > 0){
 var fn = getFieldNameTranslation((fld.startsWith('u_')) ? fld.toLowerCase() : 'u_'+fld.toLowerCase());
 if(stage.isValidField(fn)) { 
 worknum++; 
 switch(fn){
 case 'u_itemstatusdate':
 case 'u_dateshipped': case 'u_datereceived':
 case 'u_deploymentstartdate': case 'u_deploymentenddate':
 case 'u_warrantystartdate': case 'u_warrantyenddate':
 case 'u_leasestartdate': case 'u_leaseenddate':
 case 'u_receiptacknowledgment': case 'u_legalholdrelease':
 stage.setValue(fn, getFromISO8601(record[fld]));
 break;
 case 'u_trackingnumbers':
 var txn = record[fld]; 
 stage.setValue(fn, (txn instanceof Array) ? txn.join() : txn);
 break;
 case 'u_svcorderstatus':
 stat = record[fld];
 break;
 case 'u_itemstatuscode':
 code = record[fld];
 break;
 default:
 stage.setValue(fn, record[fld]);
 break;
 } 
 }
 }
 }
 if(stage.isValidField('u_svcorderstatus')) { stage.setValue('u_svcorderstatus', stat); }
 if(stage.isValidField('u_itemstatuscode')) { stage.setValue('u_itemstatuscode', code); }
 if(worknum > 0) {stage.insert();}
 }
 
 function getFieldNameTranslation(fn) {
 var fx = fn.trim();
 var ret = fx;
 switch(fx) {
 case 'u_assettag': case 'u_serialnumber': case 'u_make': case 'u_model':
 case 'u_partnumber': case 'u_partdescription': case 'u_subcategory':
 ret = fn.replace('u_', 'u_item');
 break;
 case 'u_employeeid':
 ret = 'u_shiptoemployeeid';
 break;
 case 'u_shiptoname':
 ret = 'u_customername';
 break;
 case 'u_shipmethod':
 ret = 'u_shippingmethod';
 break;
 case 'u_shippingtracking':
 ret = 'u_trackingnumbers';
 break;
 case 'u_status':
 ret = 'u_itemstatusreason';
 break;
 default:
 break;
 }
 return ret;
 }
 
 function getFromISO8601(source) {
 var ret = source;
 if(source!=null && source.match(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/)){
 try {
 var d = new Date(source.replace(/\.(\d\d\d)\d+/,".$1"));
 if(d!=null && d instanceof Date && !isNaN(d)){
 ret = (d.getUTCFullYear()+"-"+(d.getUTCMonth()+1)+"-"+d.getUTCDate()+" "
 +d.getUTCHours()+":"+d.getUTCMinutes()+":"+d.getUTCSeconds()); 
 }
 }
 catch (ex) { gs.warn("Unable to Translate ISO 8601 UTC to ServiceNow DateTime format: "+source); }
 }
 return ret; 
 }
})(request, response);]]></operation_script>
        <operation_uri>/api/x_mgmmi_dell_lch_a/assetupdate</operation_uri>
        <produces>application/json</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>false</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>537130</sys_created_by>
        <sys_created_on>2023-08-21 22:40:02</sys_created_on>
        <sys_id>98485b611b38fd10e8c154622a4bcb42</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Lifecycle Hub Asset Update</sys_name>
        <sys_package display_value="Dell LCH API Spoke" source="x_mgmmi_dell_lch_a">677d6ece1ba87910e8c154622a4bcb45</sys_package>
        <sys_policy/>
        <sys_scope display_value="Dell LCH API Spoke">677d6ece1ba87910e8c154622a4bcb45</sys_scope>
        <sys_update_name>sys_ws_operation_98485b611b38fd10e8c154622a4bcb42</sys_update_name>
        <sys_updated_by>537130</sys_updated_by>
        <sys_updated_on>2023-08-21 22:52:00</sys_updated_on>
        <web_service_definition display_value="Lifecycle Hub Asset Update">465e66c21be87910e8c154622a4bcb17</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
